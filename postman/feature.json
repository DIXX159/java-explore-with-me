{
	"info": {
		"_postman_id": "57aeee93-e8fa-4ec1-94af-7f15b30740b0",
		"name": "Feature_Comments Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26100890",
		"_collection_link": "https://lively-flare-948652.postman.co/workspace/My-Workspace~dbfa4095-91ae-458c-88d0-93a64c3fbd9a/collection/26100890-57aeee93-e8fa-4ec1-94af-7f15b30740b0?action=share&creator=26100890&source=collection_link"
	},
	"item": [
		{
			"name": "Добавление нового комментария без поля comment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/event/1/comment",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"event",
						"1",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового комментария c пустым полем comment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"comment\": \"  \"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/event/1/comment",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"event",
						"1",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового комментария с comment.length > 50",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
							"    pm.response.to.be.badRequest;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"comment\": \"Проверка добавления нового комментария, длинна которого превышает допустимый размер в 50 символов\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/event/1/comment",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"event",
						"1",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового комментария к несуществующему событию",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"comment\": \"Новый комментарий 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/event/1111/comment",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"event",
						"1111",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, comment, commentator, state, eventId\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('comment');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать заданным параметрам\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.comment).equal(source.comment, 'Комментарий должен соответствовать комментарию в запросе');\r",
							"    pm.expect(target.state).equal('PENDING', 'Статус должен быть PENDING');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        compilation = rnd.getCompilation(event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"comment\": \"Новый комментарий 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/event/1/comment",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"event",
						"1",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового плохого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, comment, commentator, state, eventId\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('comment');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать заданным параметрам\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.comment).equal(source.comment, 'Комментарий должен соответствовать комментарию в запросе');\r",
							"    pm.expect(target.state).equal('PENDING', 'Статус должен быть PENDING');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    let compilation;\r",
							"    try {\r",
							"        const user = await api.addUser(rnd.getUser());\r",
							"        const category = await api.addCategory(rnd.getCategory());\r",
							"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
							"        compilation = rnd.getCompilation(event.id);\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"comment\": \"Новый плохой комментарий\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/event/1/comment",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"event",
						"1",
						"comment"
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация несуществующего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"state\": \"PUBLISHED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/comments/111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						"111"
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклонение нового плохого комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, comment, commentator, state, eventId\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('comment');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать заданным параметрам\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.state).equal('CANCELED', 'Статус должен быть CANCELED');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"state\": \"CANCELED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация отклоненного комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"state\": \"PUBLISHED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация нового комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, comment, commentator, state, eventId\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('comment');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать заданным параметрам\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.state).equal('PUBLISHED', 'Статус должен быть PUBLISHED');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"state\": \"PUBLISHED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев несуществующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1111/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1111",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев текущего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, comment, commentator, state, eventId\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('comment');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать заданным параметрам\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.commentator).equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев несуществующего события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(404);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/event/1111",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"event",
						"1111"
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Unde incidunt quia dolorum ipsa quo consequatur. Eos consequatur ipsam omnis veniam minima et. Doloribus praesentium deleniti velit qui omnis voluptas. Excepturi sunt aut labore et possimus.\",\r\n    \"category\": 2,\r\n    \"description\": \"Veritatis voluptate voluptas perspiciatis eius. Quam quia rerum culpa ipsa dolores tempora minus rerum. Aut aliquam qui natus officiis suscipit tempore provident ex. Officiis voluptatibus et vero fugiat maxime nostrum et.\\n \\rDeleniti eum similique maiores tenetur est quis nesciunt autem. Rerum ea dolorem distinctio consequatur molestias aperiam quidem. Autem aut iste distinctio deserunt et. Quos qui magni ea dicta vel.\\n \\rQuo aut atque eligendi et adipisci recusandae et. Quae ex dolores cum qui. Blanditiis at occaecati tempora ea temporibus nesciunt illo et quos. Atque quas cum excepturi magnam consequatur. Quo tenetur placeat commodi. Illo tempora autem reiciendis veniam.\",\r\n    \"eventDate\": \"2023-06-27 06:26:24\",\r\n    \"location\": {\r\n        \"lat\": -42.4205,\r\n        \"lon\": -25.995\r\n    },\r\n    \"paid\": true,\r\n    \"participantLimit\": 225,\r\n    \"requestModeration\": true,\r\n    \"stateAction\": \"PUBLISH_EVENT\",\r\n    \"title\": \"Explicabo cum nostrum eaque.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев по событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get('response');\r",
							"const target = pm.response.json()[0];\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, comment, commentator, state, eventId\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('comment');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать заданным параметрам\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(pm.response.json().length).to.equal(1);\r",
							"    pm.expect(target.state).equal('PUBLISHED', 'Статус должен быть PUBLISHED');\r",
							"    pm.expect(target.eventId).equal(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/event/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"event",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев по не опубликованному событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/event/15",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"event",
						"15"
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение несуществующего комментария пользователем",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
							"    pm.response.to.be.notFound;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"comment\": \"Отредактированный комментарий 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/comment/11",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"comment",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "Изменение комментария пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Коммент должен содержать поля: id, comment, commentator, state, eventId\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('comment');\r",
							"pm.expect(target).to.have.property('commentator');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('eventId');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать заданным параметрам\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.comment).equal(source.comment, 'Комментарий должен соответствовать комментарию в запросе');\r",
							"    pm.expect(target.state).equal('PENDING', 'Статус должен быть PENDING');\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"comment\": \"Отредактированный комментарий 1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/comments/1/comment/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"comments",
						"1",
						"comment",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "source",
			"value": "",
			"type": "string"
		}
	]
}